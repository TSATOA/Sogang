# 1 "lexer.mll"
 
  open Parser
    exception LexicalError
  let keyword_table = Hashtbl.create 31
  let entries = [
    ("true", TRUE); 
    ("false", FALSE); 
    ("int", INT);
    ("bool", BOOL);
    ("void", VOID);
    ("if", IF);
    ("else", ELSE);
    ("while", WHILE);
    ("return", RETURN);
  ]
  let _ = List.iter (fun (k, t) -> Hashtbl.add keyword_table k t) entries

# 20 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\228\255\078\000\153\000\002\000\232\255\233\255\234\255\
    \235\255\236\255\238\255\239\255\240\255\241\255\012\000\001\000\
    \002\000\003\000\031\000\033\000\252\255\253\255\254\255\255\255\
    \251\255\250\255\249\255\247\255\244\255\243\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\026\000\025\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\027\000\027\000\
    \009\000\007\000\013\000\018\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\018\000\004\000\000\000\000\000\000\000\015\000\028\000\
    \013\000\012\000\021\000\023\000\006\000\022\000\000\000\020\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\007\000\017\000\019\000\016\000\027\000\
    \026\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\011\000\025\000\010\000\024\000\002\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\009\000\014\000\008\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\004\000\255\255\255\255\255\255\000\000\015\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\016\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\019\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \014\000\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\255\255\255\255\255\255\255\255\002\000\255\255\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 24 "lexer.mll"
              ( PLUS )
# 164 "lexer.ml"

  | 1 ->
# 25 "lexer.mll"
              ( MINUS )
# 169 "lexer.ml"

  | 2 ->
# 26 "lexer.mll"
              ( TIMES )
# 174 "lexer.ml"

  | 3 ->
# 27 "lexer.mll"
              ( DIVIDE )
# 179 "lexer.ml"

  | 4 ->
# 28 "lexer.mll"
              ( EQUAL )
# 184 "lexer.ml"

  | 5 ->
# 29 "lexer.mll"
              ( NOTEQ )
# 189 "lexer.ml"

  | 6 ->
# 30 "lexer.mll"
              ( LEQ )
# 194 "lexer.ml"

  | 7 ->
# 31 "lexer.mll"
              ( LESS )
# 199 "lexer.ml"

  | 8 ->
# 32 "lexer.mll"
              ( GEQ )
# 204 "lexer.ml"

  | 9 ->
# 33 "lexer.mll"
              ( GREATER )
# 209 "lexer.ml"

  | 10 ->
# 34 "lexer.mll"
              ( NOTEQ )
# 214 "lexer.ml"

  | 11 ->
# 35 "lexer.mll"
              ( AND )
# 219 "lexer.ml"

  | 12 ->
# 36 "lexer.mll"
              ( OR )
# 224 "lexer.ml"

  | 13 ->
# 37 "lexer.mll"
              ( NOT )
# 229 "lexer.ml"

  | 14 ->
# 38 "lexer.mll"
              ( LPAR )
# 234 "lexer.ml"

  | 15 ->
# 39 "lexer.mll"
              ( RPAR )
# 239 "lexer.ml"

  | 16 ->
# 40 "lexer.mll"
              ( LSQUARE )
# 244 "lexer.ml"

  | 17 ->
# 41 "lexer.mll"
              ( RSQUARE )
# 249 "lexer.ml"

  | 18 ->
# 42 "lexer.mll"
              ( ASSIGN )
# 254 "lexer.ml"

  | 19 ->
# 43 "lexer.mll"
              ( LBRA )
# 259 "lexer.ml"

  | 20 ->
# 44 "lexer.mll"
              ( RBRA )
# 264 "lexer.ml"

  | 21 ->
# 45 "lexer.mll"
              ( SEMICOLON )
# 269 "lexer.ml"

  | 22 ->
# 46 "lexer.mll"
              ( COMMA )
# 274 "lexer.ml"

  | 23 ->
# 47 "lexer.mll"
              ( EOF )
# 279 "lexer.ml"

  | 24 ->
# 48 "lexer.mll"
              ( token lexbuf )
# 284 "lexer.ml"

  | 25 ->
# 49 "lexer.mll"
              ( NUM (int_of_string (Lexing.lexeme lexbuf)) )
# 289 "lexer.ml"

  | 26 ->
# 50 "lexer.mll"
                                  ( let s = Lexing.lexeme lexbuf in
                                    try Hashtbl.find keyword_table s with
                                    Not_found -> IDENTIFIER s )
# 296 "lexer.ml"

  | 27 ->
# 53 "lexer.mll"
      ( let _ = Printf.printf "Invalid token %s\n" (Lexing.lexeme lexbuf) in
        raise LexicalError )
# 302 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

